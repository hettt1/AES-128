Sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

InvSbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

Rcon = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
]

nb = 4  # число столбцов
nk = 4  # число 32-х битных слов составляющих шифрключ
nr = 10  # число раундов

def key_expansion(key, nk): # генерирует раундовые ключи
    w = [0 for i in range(nb * (nr + 1))]
    i = 0
    while i < nk:
        w[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]
        i += 1
    i = nk

    while i < nb * (nr + 1):
        temp = w[i - 1].copy()
        if i % nk == 0:
            temp = arr_xor(sub_word(rot_word(temp)), Rcon[i // nk])
        elif nk > 6 and i % nk == 4:
            temp = sub_word(temp)
        w[i] = arr_xor(w[i - nk], temp)
        i += 1
    return w


def arr_xor(a, b):
    res = a.copy()
    for i in range(len(a)):
        res[i] = a[i] ^ b[i]
    return res


def sub_word(word):
    for i in range(4):
        word[i] = Sbox[word[i]]
    return word


def rot_word(word):
    return shift_1row(word, 1)


def complement(arr: list, n=16):
    k = n - len(arr)
    if k == 0:
        return arr
    for i in range(k-1):
        arr.append(0)
    arr.append(k)
    return arr


def del_extra(arr: list, n=16):
    k = arr[n-1]
    if arr[-k:] == [0]*(k-1) +[k]:
        return arr[:-arr[n-1]]
    return arr


def encrypt_block(input, words):  # шифрует 1 блок из 16 байт
    state = get_state(input)
    state = add_round_key(state, words[0:4])
    for i in range(1, nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, words[i * nb:(i + 1) * nb])

    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, words[nr * nb: (nr + 1) * nb])
    return state_out(state)


def decrypt_block(input,words):
    state = get_state(input)
    state = add_round_key(state, words[nr*nb: (nr+1)*nb])
    for i in range(nr - 1, 0, -1):
        state = shift_rows(state, -1)
        state = sub_bytes(state, -1)
        state = add_round_key(state, words[i * nb: (i + 1) * nb])
        state = inv_mix_columns(state)

    state = shift_rows(state, -1)
    state = sub_bytes(state, -1)
    state = add_round_key(state, words[:nb])

    return state_out(state)


def get_state(input):  # заполняем массив по колонкам
    state = [[0] * 4 for i in range(4)]
    for r in range(4):
        for c in range(4):
            state[r][c] = input[r + 4 * c]

    return state

def add_round_key(state, w):
    new_state = [[0]*4 for i in range(4)]
    for c in range(4):
        for r in range(4):
            new_state[r][c] = state[r][c] ^ w[c][r]
    return new_state


def sub_bytes(state, box=1):
    for r in range(4):
        for c in range(4):
            if box == 1:
                state[r][c] = Sbox[state[r][c]]
            else:
                state[r][c] = InvSbox[state[r][c]]
    return state


def shift_rows(state, c=1):
    for i in range(1, len(state)):
        state[i] = shift_1row(state[i], c * i)
    return state


def shift_1row(arr, k):
    return arr[k:] + arr[:k]


def mix_columns(state):
    new_state = [[0]*4 for _ in range(4)]
    for c in range(4):
        s0 = mul_02(state[0][c]) ^ mul_03(state[1][c]) ^ state[2][c] ^ state[3][c]
        s1 = state[0][c] ^ mul_02(state[1][c]) ^ mul_03(state[2][c]) ^ state[3][c]
        s2 = state[0][c] ^ state[1][c] ^ mul_02(state[2][c]) ^ mul_03(state[3][c])
        s3 = mul_03(state[0][c]) ^ state[1][c] ^ state[2][c] ^ mul_02(state[3][c])
        new_state[0][c] = s0
        new_state[1][c] = s1
        new_state[2][c] = s2
        new_state[3][c] = s3
    return new_state


def inv_mix_columns(state):
    new_state = [[0]*4 for _ in range(4)]
    for c in range(4):
        s0 = mul_0e(state[0][c]) ^ mul_0b(state[1][c]) ^ mul_0d(state[2][c]) ^ mul_09(state[3][c])
        s1 = mul_09(state[0][c]) ^ mul_0e(state[1][c]) ^ mul_0b(state[2][c]) ^ mul_0d(state[3][c])
        s2 = mul_0d(state[0][c]) ^ mul_09(state[1][c]) ^ mul_0e(state[2][c]) ^ mul_0b(state[3][c])
        s3 = mul_0b(state[0][c]) ^ mul_0d(state[1][c]) ^ mul_09(state[2][c]) ^ mul_0e(state[3][c])
        new_state[0][c] = s0
        new_state[1][c] = s1
        new_state[2][c] = s2
        new_state[3][c] = s3
    return new_state


def mul_02(num):
    if num < 0x80: # меньше 128
        res = (num << 1) # число умножается на 2 путем сдвига влево на один бит. Это эквивалентно умножению на 2 в двоичной системе
    else:
        res = (num << 1) ^ 0x011b
    return res % 0x100


def mul_03(num):
    return mul_02(num) ^ num


def mul_09(num):
    return mul_02(mul_02(mul_02(num))) ^ num


def mul_0b(num):
    return mul_02(mul_02(mul_02(num))) ^ mul_02(num) ^ num


def mul_0d(num):
    return mul_02(mul_02(mul_02(num))) ^ mul_02(mul_02(num)) ^ num


def mul_0e(num):
    return mul_02(mul_02(mul_02(num))) ^ mul_02(mul_02(num)) ^ mul_02(num)


def state_out(state):  # преобразует матрицу в одномерный массив
    out = [0] * 16
    for r in range(4):
        for c in range(4):
            out[r + 4 * c] = state[r][c]
    return out


def encrypt(input, key):
    # list из байтов т.е чисел от 0 255
    words = key_expansion(key, 4)
    #print(words)
    res = []
    block = input[:16]
    i = 0
    while block:
        block = complement(block)
        res += encrypt_block(block, words)
        i += 1
        block = input[i*16:(i+1)*16]
    return res


def decrypt(input: list, key):
    res = []
    words = key_expansion(key, 4)
    block = input[:16]
    i = 0
    l = len(input) // 16 -1
    while block:
        temp = decrypt_block(block, words)
        if i >= l:
            temp = del_extra(temp)
        res += temp
        i += 1
        block = input[i * 16:(i + 1) * 16]
    return res


print('Выберите действие:\n'
      '1 - зашифровать\n'
      '2 - расшифровать')

choice = int(input())

print('Введите полный путь к файлу')  
path = input()

print('Введите ключ')  # 7a 76 6b 53 11 a3 2d e3 ab f7 5a 88 09 cf 6e 4f
key = input()

if choice == 1:
    with open(path, 'rb') as file:
        text = [byte for byte in file.read()]

    key = key.split()
    for i in range(len(key)):
        key[i] = int(key[i], 16)

    ciphered = encrypt(text, key)

    print('введите путь для записи файла')
    where = input()
    with open(where, 'wb') as file:
        file.write(bytes(ciphered))


elif int(choice) == 2:
    with open(path, 'rb') as file:
        ciphered = [byte for byte in file.read()]

    key = key.split()
    for i in range(len(key)):
        key[i] = int(key[i], 16)

    text = decrypt(ciphered, key)

    print('Введите путь для записи файла')
    where = input()
    with open(where, 'wb') as file:
        file.write(bytes(text))